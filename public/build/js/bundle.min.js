
(function() {
    //constantes
    const STRING_VACIO = '';

    //selectores
    const categoria_id = document.querySelector("[name='categoria_id']");
    const dias = document.querySelectorAll("[name='dia']");
    const inputHiddenDia = document.querySelector("[name='dia_id']");
    const inputHiddenHora = document.querySelector("[name='hora_id']");

    const evento = {
        'categoria_id': STRING_VACIO,
        'dia': STRING_VACIO
    }

    if(categoria_id){
        categoria_id.addEventListener('change', terminosDeBusqueda);
        dias.forEach(dia => dia.addEventListener('change', terminosDeBusqueda));
    }

    function terminosDeBusqueda(event) {
        evento[event.target.name] = event.target.value;

        //reset a los campos ocultos
        inputHiddenHora.value = STRING_VACIO;
        inputHiddenDia.value = STRING_VACIO;

        if(!Object.values(evento).includes(STRING_VACIO)) {
            obtenerEventos();
        }  
    }
    
    async function obtenerEventos() {
        
        const {categoria_id, dia} = evento;
        const url = `/api/eventos?categoria_id=${categoria_id}&dia_id=${dia}`;
        
        try {
            const respuesta = await fetch(url);
            const eventos = await respuesta.json();
            obtenerHorasDisponibles(eventos);
        } catch (error) {
            console.log(error);
        }       
    }

    
    function obtenerHorasDisponibles(eventos) {

        /**
         * Reset de las clases en los elementos li
         * restaurar la clase horas__hora--desactivada
         * eliminar la clase horas__hora--select
         * remover eventListener de los elementos con la clase horas__hora--desactivada
         */
        const listaHoras = document.querySelectorAll('#horas li');
        listaHoras.forEach(li => {
            li.classList.add('horas__hora--desactivada');
        });
        
        horaActiva = document.querySelector('.horas__hora--selec');
        if(horaActiva) {
            horaActiva.classList.remove('horas__hora--selec');
        }

        const horasOcupadas = eventos.map(horas => horas.hora_id);

        //el selector listaHoras contiene un nodelist, convertirlo en array para utilizar filter()
        const listaHorasArray = Array.from(listaHoras);

        //filtrar las horas disponibles
        const resultado = listaHorasArray.filter(hora => !horasOcupadas.includes(hora.dataset.horaId) );

        //eliminar la clase .horas__hora--desactivada
        resultado.forEach(hora => hora.classList.remove('horas__hora--desactivada'));

        //iterar las horas para agregar un evento que permita seleccionar una hora
        const horasDisponibles = document.querySelectorAll('.horas__hora:not(.horas__hora--desactivada)');
        horasDisponibles.forEach( hora => hora.addEventListener('click', seleccionarHora));
        
        //remover eventListener de los elementos con la clase horas__hora--desactivada
        const horasNoDisponibles = document.querySelectorAll('.horas__hora--desactivada');
        Array.from(horasNoDisponibles).forEach(hora => hora.removeEventListener('click', seleccionarHora));
    }

    function seleccionarHora(event) {

        //agregar valores a los inputs ocultos
        inputHiddenHora.value = event.target.dataset.horaId;        
        inputHiddenDia.value = document.querySelector('[name="dia"]:checked').value;
        
        //eliminar clase de un elemento previamente seleccionado
        horaActiva = document.querySelector('.horas__hora--selec');
        if(horaActiva) {
            horaActiva.classList.remove('horas__hora--selec');
        }

        //agregar clase a la hora seleccionda
        event.target.classList.add('horas__hora--selec');
        
    }

})();

////////////////////////////////
(function(){

    const ponentesInput = document.querySelector('#ponentes');
    
    if(ponentesInput) {
        let ponentes = [];
        let ponentesFiltrados = [];
        ponentesInput.addEventListener('input', buscarPonentes);
        const listaPonentes = document.querySelector('#lista-ponentes');
        const ponenteId = document.querySelector("[name='ponente_id']");

        consultarPonentes();

        async function consultarPonentes() {

            const url = '/api/ponentes';
            const request = await fetch(url);
            const response= await request.json();

            formatearPonentes(response);
        }

        function formatearPonentes(arrayResponse = []) {
            ponentes = arrayResponse.map(ponente => {
                return {
                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,
                    id: ponente.id
                }
            })  
        }

        function buscarPonentes(event) {
            const busqueda = event.target.value;

            if(busqueda.length >= 3) {
                const regexp = new RegExp(busqueda, "i");
                ponentesFiltrados = ponentes.filter(ponente => {
                    if(ponente.nombre.toLowerCase().search(regexp) !== -1) {
                        return ponente;
                    }
                })          
                
                mostrarPonentesFiltrados();
                return;
            }

            ponentesFiltrados = [];
            mostrarPonentesFiltrados();

            //borrar el ponente_id
            ponenteId.value = "";
        }

        function mostrarPonentesFiltrados() {

            while(listaPonentes.firstChild) {
                listaPonentes.removeChild(listaPonentes.firstChild);
            }

            if(ponentesFiltrados.length) {
                ponentesFiltrados.forEach(ponente => {
                    const li = document.createElement('LI');
                    li.classList.add('lista-ponentes__ponente');
                    li.dataset.ponenteId = ponente.id;
                    li.textContent = ponente.nombre;
                    li.onclick = seleccionarPonente;
                    listaPonentes.appendChild(li);  
                })
                return;
            }
            
            const noPonentes = document.createElement('P');
            noPonentes.classList.add('lista-ponentes__no-ponentes');
            noPonentes.textContent = 'No se encontraron resultados';
            listaPonentes.appendChild(noPonentes);

        }

        function seleccionarPonente(event) {

            //agregar clase para darle estilos
            const ponenteSeleccionado = document.querySelector('.lista-ponentes__ponente--seleccionado');

            if(ponenteSeleccionado) {
                ponenteSeleccionado.classList.remove('lista-ponentes__ponente--seleccionado');
            }

            event.target.classList.add('lista-ponentes__ponente--seleccionado');

            //agregar el ponente_id al value
            ponenteId.value = event.target.dataset.ponenteId;           
        }
    }

})();
(function(){
    const tagsInput = document.querySelector('#tags_input');
    const tagsHidden = document.querySelector('[name="tags"]');
    const tagsDiv = document.querySelector('#tags');
    
    //si existe el elemento en el html
    if(tagsInput) {
        let tags = [];

        //verificar si hay datso en el input hidden
        if(tagsHidden.value !== ''){
            tags = tagsHidden.value.split(',');
            mostrarTags();
        }

        tagsInput.addEventListener('keypress', agregarTags);

        function agregarTags(event) {
            //detectar el keycode de la coma
            if(event.keyCode === 44) {
                //prevenir agregar vac√≠os o textos con una letra
                if(event.target.value.trim() === '' || event.target.value.length <= 1) {
                    event.preventDefault();
                    //limpiar input
                    tagsInput.value = '';
                    return;
                }
    
                event.preventDefault();
    
                //agregar al arreglo de tags
                tags = [...tags, event.target.value.trim()];
    
                //agregar al input hidden
                agregarTagsInputHidden();
    
                //limpiar input
                tagsInput.value = '';
    
                mostrarTags();
    
            }
        }
    
        function agregarTagsInputHidden() {        
            tagsHidden.value = tags;
        }
    
        function mostrarTags() {
            //remover elementos existentes
            while(tagsDiv.firstChild){
                tagsDiv.removeChild(tagsDiv.firstChild);
            }
    
            tags.forEach(tag => {
                const contenedorTag = document.createElement('DIV');
                contenedorTag.classList.add('formulario__contenedor-tag');
    
                const tagLi = document.createElement('LI');
                tagLi.classList.add('formulario__tag');
                tagLi.textContent = tag;
    
                const icon = document.createElement('I');
                icon.classList.add('fa-regular', 'fa-circle-xmark', 'formulario__tag-icono');
                icon.onclick = eliminarTag;
    
                contenedorTag.appendChild(tagLi);
                contenedorTag.appendChild(icon);
                tagsDiv.appendChild(contenedorTag);
            })
        }
    
        function eliminarTag(event) {
            //remover elemento del DOM
            event.target.parentElement.remove();
    
            //actualizar arreglo
            tags = tags.filter(tag => tag !== event.target.parentElement.firstChild.textContent);
    
            //actualizar el value del input hidden
            agregarTagsInputHidden();
        };
    }

})();
//# sourceMappingURL=bundle.js.map
